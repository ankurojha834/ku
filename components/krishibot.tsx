"use client"

import type React from "react"

import { useState, useRef, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardHeader } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Avatar, AvatarFallback } from "@/components/ui/avatar"
import { Separator } from "@/components/ui/separator"
import { Send, Leaf, Sun, CloudRain, Sprout, Moon, Palette, Languages } from "lucide-react"
import { cn } from "@/lib/utils"
import { getCategoryColor, getCategoryIcon } from "@/lib/categoryUtils"

interface Message {
  id: string
  text: string
  sender: "user" | "bot"
  timestamp: Date
  category?: "crop" | "weather" | "pest" | "fertilizer" | "general"
}

interface Theme {
  name: string
  primary: string
  secondary: string
  accent: string
  background: string
  icon: React.ReactNode
}

interface Language {
  code: string
  name: string
  flag: string
}

interface Translations {
  [key: string]: {
    title: string
    subtitle: string
    placeholder: string
    suggestions: string[]
    categories: {
      crop: string
      weather: string
      pest: string
      fertilizer: string
      general: string
    }
    welcomeMessage: string
    errorMessage: string
    themeSelector: string
  }
}

const languages: Language[] = [
  { code: "hi", name: "‡§π‡§ø‡§Ç‡§¶‡•Ä", flag: "üáÆüá≥" },
  { code: "en", name: "English", flag: "üá¨üáß" },
  { code: "ml", name: "‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç", flag: "üáÆüá≥" },
]

const translations: Translations = {
  hi: {
    title: "KrishiBot",
    subtitle: "‡§Ü‡§™‡§ï‡§æ ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§ï‡•É‡§∑‡§ø ‡§∏‡§≤‡§æ‡§π‡§ï‡§æ‡§∞",
    placeholder: "‡§Ö‡§™‡§®‡§æ ‡§∏‡§µ‡§æ‡§≤ ‡§Ø‡§π‡§æ‡§Å ‡§≤‡§ø‡§ñ‡•á‡§Ç...",
    suggestions: ["‡§´‡§∏‡§≤ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä", "‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø", "‡§ï‡•Ä‡§ü ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£", "‡§ñ‡§æ‡§¶ ‡§ï‡•Ä ‡§∏‡§≤‡§æ‡§π"],
    categories: {
      crop: "‡§´‡§∏‡§≤",
      weather: "‡§Æ‡•å‡§∏‡§Æ",
      pest: "‡§ï‡•Ä‡§ü",
      fertilizer: "‡§ñ‡§æ‡§¶",
      general: "‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø",
    },
    welcomeMessage:
      "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç KrishiBot ‡§π‡•Ç‡§Ç, ‡§Ü‡§™‡§ï‡§æ ‡§ï‡•É‡§∑‡§ø ‡§∏‡§π‡§æ‡§Ø‡§ï‡•§ ‡§Æ‡•à‡§Ç ‡§´‡§∏‡§≤, ‡§ï‡•Ä‡§ü, ‡§Æ‡•å‡§∏‡§Æ, ‡§î‡§∞ ‡§ñ‡§æ‡§¶ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§¶‡•á ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§ú ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•à‡§∏‡•á ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç?",
    errorMessage: "‡§Æ‡§æ‡§´ ‡§ï‡§∞‡•á‡§Ç, ‡§ï‡•Å‡§õ ‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§",
    themeSelector: "‡§•‡•Ä‡§Æ ‡§ö‡•Å‡§®‡•á‡§Ç:",
  },
  en: {
    title: "KrishiBot",
    subtitle: "Your Digital Agriculture Advisor",
    placeholder: "Type your question here...",
    suggestions: ["Crop Information", "Weather Status", "Pest Control", "Fertilizer Advice"],
    categories: {
      crop: "Crop",
      weather: "Weather",
      pest: "Pest",
      fertilizer: "Fertilizer",
      general: "General",
    },
    welcomeMessage:
      "Hello! I'm KrishiBot, your agriculture assistant. I can provide suggestions about crops, pests, weather, and fertilizers. How can I help you today?",
    errorMessage: "Sorry, there's a technical issue. Please try again.",
    themeSelector: "Choose Theme:",
  },
  ml: {
    title: "KrishiBot",
    subtitle: "‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥°‡¥ø‡¥ú‡¥ø‡¥±‡µç‡¥±‡µΩ ‡¥ï‡µÉ‡¥∑‡¥ø ‡¥â‡¥™‡¥¶‡µá‡¥∂‡¥ï‡µª",
    placeholder: "‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥ö‡µã‡¥¶‡µç‡¥Ø‡¥Ç ‡¥á‡¥µ‡¥ø‡¥ü‡µÜ ‡¥ü‡µà‡¥™‡µç‡¥™‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï...",
    suggestions: ["‡¥µ‡¥ø‡¥≥ ‡¥µ‡¥ø‡¥µ‡¥∞‡¥ô‡µç‡¥ô‡µæ", "‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥•", "‡¥ï‡µÄ‡¥ü ‡¥®‡¥ø‡¥Ø‡¥®‡µç‡¥§‡µç‡¥∞‡¥£‡¥Ç", "‡¥µ‡¥≥‡¥Ç ‡¥â‡¥™‡¥¶‡µá‡¥∂‡¥Ç"],
    categories: {
      crop: "‡¥µ‡¥ø‡¥≥",
      weather: "‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥•",
      pest: "‡¥ï‡µÄ‡¥ü‡¥Ç",
      fertilizer: "‡¥µ‡¥≥‡¥Ç",
      general: "‡¥™‡µä‡¥§‡µÅ‡¥µ‡¥æ‡¥Ø‡¥§‡µç",
    },
    welcomeMessage:
      "‡¥®‡¥Æ‡¥∏‡µç‡¥ï‡¥æ‡¥∞‡¥Ç! ‡¥û‡¥æ‡µª KrishiBot ‡¥Ü‡¥£‡µç, ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥ï‡µÉ‡¥∑‡¥ø ‡¥∏‡¥π‡¥æ‡¥Ø‡¥ø. ‡¥µ‡¥ø‡¥≥‡¥ï‡µæ, ‡¥ï‡µÄ‡¥ü‡¥ô‡µç‡¥ô‡µæ, ‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥•, ‡¥µ‡¥≥‡¥ô‡µç‡¥ô‡µæ ‡¥é‡¥®‡µç‡¥®‡¥ø‡¥µ‡¥Ø‡µÜ‡¥ï‡µç‡¥ï‡µÅ‡¥±‡¥ø‡¥ö‡µç‡¥ö‡µç ‡¥é‡¥®‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥®‡¥ø‡µº‡¥¶‡µç‡¥¶‡µá‡¥∂‡¥ô‡µç‡¥ô‡µæ ‡¥®‡µΩ‡¥ï‡¥æ‡µª ‡¥ï‡¥¥‡¥ø‡¥Ø‡µÅ‡¥Ç. ‡¥á‡¥®‡µç‡¥®‡µç ‡¥û‡¥æ‡µª ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÜ ‡¥é‡¥ô‡µç‡¥ô‡¥®‡µÜ ‡¥∏‡¥π‡¥æ‡¥Ø‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥Ç?",
    errorMessage: "‡¥ï‡µç‡¥∑‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡¥£‡¥Ç, ‡¥í‡¥∞‡µÅ ‡¥∏‡¥æ‡¥ô‡µç‡¥ï‡µá‡¥§‡¥ø‡¥ï ‡¥™‡µç‡¥∞‡¥∂‡µç‡¥®‡¥Æ‡µÅ‡¥£‡µç‡¥ü‡µç. ‡¥¶‡¥Ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥µ‡µÄ‡¥£‡µç‡¥ü‡µÅ‡¥Ç ‡¥∂‡µç‡¥∞‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
    themeSelector: "‡¥§‡µÄ‡¥Ç ‡¥§‡¥ø‡¥∞‡¥û‡µç‡¥û‡µÜ‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥ï:",
  },
}

const themes: Theme[] = [
  {
    name: "Green Fields",
    primary: "bg-green-600 hover:bg-green-700",
    secondary: "bg-green-100 dark:bg-green-900",
    accent: "text-green-600 dark:text-green-400",
    background: "from-green-50 to-emerald-100 dark:from-green-950 dark:to-emerald-900",
    icon: <Leaf className="w-4 h-4" />,
  },
  {
    name: "Golden Harvest",
    primary: "bg-amber-600 hover:bg-amber-700",
    secondary: "bg-amber-100 dark:bg-amber-900",
    accent: "text-amber-600 dark:text-amber-400",
    background: "from-amber-50 to-yellow-100 dark:from-amber-950 dark:to-yellow-900",
    icon: <Sun className="w-4 h-4" />,
  },
  {
    name: "Monsoon Blue",
    primary: "bg-blue-600 hover:bg-blue-700",
    secondary: "bg-blue-100 dark:bg-blue-900",
    accent: "text-blue-600 dark:text-blue-400",
    background: "from-blue-50 to-cyan-100 dark:from-blue-950 dark:to-cyan-900",
    icon: <CloudRain className="w-4 h-4" />,
  },
  {
    name: "Earth Brown",
    primary: "bg-amber-700 hover:bg-amber-800",
    secondary: "bg-amber-200 dark:bg-amber-800",
    accent: "text-amber-700 dark:text-amber-300",
    background: "from-amber-100 to-orange-200 dark:from-amber-900 dark:to-orange-900",
    icon: <Sprout className="w-4 h-4" />,
  },
]

export function KrishiBot() {
  const [currentLanguage, setCurrentLanguage] = useState("hi")
  const [showLanguageSelector, setShowLanguageSelector] = useState(false)

  const t = translations[currentLanguage]

  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      text: t.welcomeMessage,
      sender: "bot",
      timestamp: new Date(),
      category: "general",
    },
  ])
  const [inputValue, setInputValue] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const [currentTheme, setCurrentTheme] = useState(0)
  const [isDarkMode, setIsDarkMode] = useState(false)
  const [showThemeSelector, setShowThemeSelector] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const scrollAreaRef = useRef<HTMLDivElement>(null)

  const theme = themes[currentTheme]

  useEffect(() => {
    setMessages([
      {
        id: "1",
        text: t.welcomeMessage,
        sender: "bot",
        timestamp: new Date(),
        category: "general",
      },
    ])
  }, [currentLanguage, t.welcomeMessage])

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }, [messages])

  useEffect(() => {
    if (isDarkMode) {
      document.documentElement.classList.add("dark")
    } else {
      document.documentElement.classList.remove("dark")
    }
  }, [isDarkMode])

  const categorizeMessage = (text: string): Message["category"] => {
    const lowerText = text.toLowerCase()

    if (
      lowerText.includes("‡§´‡§∏‡§≤") ||
      lowerText.includes("crop") ||
      lowerText.includes("‡¥µ‡¥ø‡¥≥") ||
      lowerText.includes("wheat") ||
      lowerText.includes("rice") ||
      lowerText.includes("‡§ó‡•á‡§π‡•Ç‡§Ç") ||
      lowerText.includes("‡¥ö‡¥æ‡¥µ‡¥≤")
    )
      return "crop"

    if (
      lowerText.includes("‡§Æ‡•å‡§∏‡§Æ") ||
      lowerText.includes("weather") ||
      lowerText.includes("‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥•") ||
      lowerText.includes("rain") ||
      lowerText.includes("temperature") ||
      lowerText.includes("‡§¨‡§æ‡§∞‡§ø‡§∂")
    )
      return "weather"

    if (
      lowerText.includes("‡§ï‡•Ä‡§ü") ||
      lowerText.includes("pest") ||
      lowerText.includes("‡¥ï‡µÄ‡¥ü‡¥Ç") ||
      lowerText.includes("insect") ||
      lowerText.includes("disease") ||
      lowerText.includes("‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä")
    )
      return "pest"

    if (
      lowerText.includes("‡§ñ‡§æ‡§¶") ||
      lowerText.includes("fertilizer") ||
      lowerText.includes("‡¥µ‡¥≥‡¥Ç") ||
      lowerText.includes("nutrient") ||
      lowerText.includes("soil") ||
      lowerText.includes("‡¥Æ‡¥£‡µç‡¥£‡µç")
    )
      return "fertilizer"

    return "general"
  }

  const simulateBotResponse = async (userMessage: string): Promise<string> => {
    await new Promise((resolve) => setTimeout(resolve, 1000 + Math.random() * 2000))

    const category = categorizeMessage(userMessage)

    const responses = {
      hi: {
        crop: [
          "‡§´‡§∏‡§≤ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡§∞‡§æ‡§è‡§Ç ‡§î‡§∞ ‡§â‡§ö‡§ø‡§§ ‡§¨‡•Ä‡§ú ‡§ï‡§æ ‡§ö‡§Ø‡§® ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§ï‡§æ ‡§∏‡§Æ‡§Ø ‡§î‡§∞ ‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡§æ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§∞‡§ñ‡•á‡§Ç‡•§",
          "‡§á‡§∏ ‡§Æ‡•å‡§∏‡§Æ ‡§Æ‡•á‡§Ç ‡§ó‡•á‡§π‡•Ç‡§Ç ‡§ï‡•Ä ‡§¨‡•Å‡§Ü‡§à ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§®‡•ç‡§®‡§§ ‡§ï‡§ø‡§∏‡•ç‡§Æ ‡§ï‡§æ ‡§ö‡§Ø‡§® ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§ñ‡§æ‡§¶ ‡§ï‡•Ä ‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ 120:60:40 NPK ‡§™‡•ç‡§∞‡§§‡§ø ‡§π‡•á‡§ï‡•ç‡§ü‡•á‡§Ø‡§∞ ‡§∞‡§ñ‡•á‡§Ç‡•§",
        ],
        weather: [
          "‡§Ü‡§ú ‡§ï‡§æ ‡§Æ‡•å‡§∏‡§Æ ‡§´‡§∏‡§≤ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤ ‡§π‡•à‡•§ ‡§Ö‡§ó‡§≤‡•á 3 ‡§¶‡§ø‡§® ‡§¨‡§æ‡§∞‡§ø‡§∂ ‡§ï‡•Ä ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§®‡§æ ‡§π‡•à, ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§∞‡•ã‡§ï ‡§¶‡•á‡§Ç‡•§",
          "‡§§‡§æ‡§™‡§Æ‡§æ‡§® ‡§¨‡§¢‡§º‡§®‡•á ‡§∏‡•á ‡§´‡§∏‡§≤ ‡§ï‡•ã ‡§®‡•Å‡§ï‡§∏‡§æ‡§® ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§ ‡§õ‡§æ‡§Ø‡§æ‡§¶‡§æ‡§∞ ‡§ú‡§æ‡§≤ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§∂‡§æ‡§Æ ‡§ï‡•ã ‡§™‡§æ‡§®‡•Ä ‡§¶‡•á‡§Ç‡•§",
        ],
        pest: [
          "‡§ï‡•Ä‡§ü ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡•Ä‡§Æ ‡§ï‡§æ ‡§§‡•á‡§≤ 5ml ‡§™‡•ç‡§∞‡§§‡§ø ‡§≤‡•Ä‡§ü‡§∞ ‡§™‡§æ‡§®‡•Ä ‡§Æ‡•á‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡§ï‡§∞ ‡§õ‡§ø‡§°‡§º‡§ï‡§æ‡§µ ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§∞‡§æ‡§∏‡§æ‡§Ø‡§®‡§ø‡§ï ‡§¶‡§µ‡§æ ‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§ú‡•à‡§µ‡§ø‡§ï ‡§â‡§™‡§æ‡§Ø ‡§Ö‡§™‡§®‡§æ‡§è‡§Ç‡•§",
          "‡§™‡§§‡•ç‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§™‡§∞ ‡§ß‡§¨‡•ç‡§¨‡•á ‡§¶‡§ø‡§ñ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç ‡§§‡•ã ‡§ï‡•â‡§™‡§∞ ‡§ë‡§ï‡•ç‡§∏‡•Ä‡§ï‡•ç‡§≤‡•ã‡§∞‡§æ‡§á‡§° 2 ‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§™‡•ç‡§∞‡§§‡§ø ‡§≤‡•Ä‡§ü‡§∞ ‡§™‡§æ‡§®‡•Ä ‡§Æ‡•á‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡§ï‡§∞ ‡§∏‡•ç‡§™‡•ç‡§∞‡•á ‡§ï‡§∞‡•á‡§Ç‡•§",
        ],
        fertilizer: [
          "‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§ñ‡§æ‡§¶ ‡§¶‡•á‡§Ç‡•§ ‡§ú‡•à‡§µ‡§ø‡§ï ‡§ñ‡§æ‡§¶ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç - ‡§ó‡•ã‡§¨‡§∞ ‡§ï‡•Ä ‡§ñ‡§æ‡§¶ 10 ‡§ü‡§® ‡§™‡•ç‡§∞‡§§‡§ø ‡§π‡•á‡§ï‡•ç‡§ü‡•á‡§Ø‡§∞‡•§",
          "‡§´‡§æ‡§∏‡•ç‡§´‡•ã‡§∞‡§∏ ‡§ï‡•Ä ‡§ï‡§Æ‡•Ä ‡§¶‡§ø‡§ñ ‡§∞‡§π‡•Ä ‡§π‡•à‡•§ DAP 100 ‡§ï‡§ø‡§≤‡•ã ‡§™‡•ç‡§∞‡§§‡§ø ‡§π‡•á‡§ï‡•ç‡§ü‡•á‡§Ø‡§∞ ‡§¨‡•Å‡§Ü‡§à ‡§ï‡•á ‡§∏‡§Æ‡§Ø ‡§¶‡•á‡§Ç‡•§",
        ],
        general: [
          "‡§ï‡•É‡§∑‡§ø ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡•Ä ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡•à‡§Ç ‡§Ø‡§π‡§æ‡§Å ‡§π‡•Ç‡§Ç‡•§ ‡§´‡§∏‡§≤, ‡§Æ‡•å‡§∏‡§Æ, ‡§ï‡•Ä‡§ü ‡§Ø‡§æ ‡§ñ‡§æ‡§¶ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§õ‡•á‡§Ç‡•§",
          "‡§Ü‡§™‡§ï‡•Ä ‡§ñ‡•á‡§§‡•Ä ‡§Æ‡•á‡§Ç ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§ß‡•Å‡§®‡§ø‡§ï ‡§§‡§ï‡§®‡•Ä‡§ï ‡§Ö‡¥™‡§®‡§æ‡§è‡§Ç‡•§ ‡§°‡•ç‡§∞‡§ø‡§™ ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§î‡§∞ ‡§Æ‡§≤‡•ç‡§ö‡§ø‡§Ç‡§ó ‡§ï‡§æ ‡§â‡§™‡¥Ø‡µã‡¥ó ‡§ï‡¥∞‡•á‡§Ç‡•§",
        ],
      },
      en: {
        crop: [
          "Test your soil and select appropriate seeds for your crop. Pay attention to irrigation timing and quantity.",
          "For wheat sowing this season, choose improved varieties. Use fertilizer at 120:60:40 NPK per hectare.",
        ],
        weather: [
          "Today's weather is favorable for crops. Rain is expected for the next 3 days, stop irrigation.",
          "Rising temperature can damage crops. Use shade nets and water in the evening.",
        ],
        pest: [
          "For pest control, spray neem oil 5ml per liter of water. Try organic methods before chemical pesticides.",
          "If you see spots on leaves, spray copper oxychloride 2 grams per liter of water.",
        ],
        fertilizer: [
          "Apply fertilizer based on soil testing. Use organic fertilizer - cow dung manure 10 tons per hectare.",
          "Phosphorus deficiency is visible. Apply DAP 100 kg per hectare at sowing time.",
        ],
        general: [
          "I'm here for any agriculture-related problems. Ask about crops, weather, pests, or fertilizers.",
          "Adopt modern techniques to improve your farming. Use drip irrigation and mulching.",
        ],
      },
      ml: {
        crop: [
          "‡¥µ‡¥ø‡¥≥‡¥Ø‡µç‡¥ï‡µç‡¥ï‡¥æ‡¥Ø‡¥ø ‡¥Æ‡¥£‡µç‡¥£‡µç ‡¥™‡¥∞‡¥ø‡¥∂‡µã‡¥ß‡¥® ‡¥®‡¥ü‡¥§‡µç‡¥§‡¥ø ‡¥â‡¥ö‡¥ø‡¥§‡¥Æ‡¥æ‡¥Ø ‡¥µ‡¥ø‡¥§‡µç‡¥§‡µç ‡¥§‡¥ø‡¥∞‡¥û‡µç‡¥û‡µÜ‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥ï. ‡¥®‡¥®‡¥Ø‡µç‡¥ï‡µç‡¥ï‡¥≤‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥∏‡¥Æ‡¥Ø‡¥µ‡µÅ‡¥Ç ‡¥Ö‡¥≥‡¥µ‡µÅ‡¥Ç ‡¥∂‡µç‡¥∞‡¥¶‡µç‡¥ß‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
          "‡¥à ‡¥∏‡µÄ‡¥∏‡¥£‡¥ø‡µΩ ‡¥ó‡µã‡¥§‡¥Æ‡µç‡¥™‡µç ‡¥µ‡¥ø‡¥§‡¥Ø‡µç‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥Æ‡µÜ‡¥ö‡µç‡¥ö‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü ‡¥á‡¥®‡¥Ç ‡¥§‡¥ø‡¥∞‡¥û‡µç‡¥û‡µÜ‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥ï. ‡¥π‡µÜ‡¥ï‡µç‡¥ü‡¥±‡¥ø‡¥®‡µç 120:60:40 NPK ‡¥µ‡¥≥‡¥Ç ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
        ],
        weather: [
          "‡¥á‡¥®‡µç‡¥®‡¥§‡µç‡¥§‡µÜ ‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥• ‡¥µ‡¥ø‡¥≥‡¥ï‡µæ‡¥ï‡µç‡¥ï‡µç ‡¥Ö‡¥®‡µÅ‡¥ï‡µÇ‡¥≤‡¥Æ‡¥æ‡¥£‡µç. ‡¥Ö‡¥ü‡µÅ‡¥§‡µç‡¥§ 3 ‡¥¶‡¥ø‡¥µ‡¥∏‡¥Ç ‡¥Æ‡¥¥‡¥Ø‡µç‡¥ï‡µç‡¥ï‡µç ‡¥∏‡¥æ‡¥ß‡µç‡¥Ø‡¥§, ‡¥®‡¥®‡¥Ø‡µç‡¥ï‡µç‡¥ï‡µΩ ‡¥®‡¥ø‡µº‡¥§‡µç‡¥§‡µÅ‡¥ï.",
          "‡¥§‡¥æ‡¥™‡¥®‡¥ø‡¥≤ ‡¥µ‡µº‡¥¶‡µç‡¥ß‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡µç ‡¥µ‡¥ø‡¥≥‡¥ï‡µæ‡¥ï‡µç‡¥ï‡µç ‡¥¶‡µã‡¥∑‡¥Ç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥Ç. ‡¥∑‡µá‡¥°‡µç ‡¥®‡µÜ‡¥±‡µç‡¥±‡µç ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ö‡µç‡¥ö‡µç ‡¥µ‡µà‡¥ï‡µÅ‡¥®‡µç‡¥®‡µá‡¥∞‡¥Ç ‡¥µ‡µÜ‡¥≥‡µç‡¥≥‡¥Ç ‡¥ï‡µä‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
        ],
        pest: [
          "‡¥ï‡µÄ‡¥ü ‡¥®‡¥ø‡¥Ø‡¥®‡µç‡¥§‡µç‡¥∞‡¥£‡¥§‡µç‡¥§‡¥ø‡¥®‡µç ‡¥≤‡¥ø‡¥±‡µç‡¥±‡µº ‡¥µ‡µÜ‡¥≥‡µç‡¥≥‡¥§‡µç‡¥§‡¥ø‡µΩ 5ml ‡¥µ‡µá‡¥™‡µç‡¥™‡µÜ‡¥£‡µç‡¥£ ‡¥ï‡¥≤‡µº‡¥§‡µç‡¥§‡¥ø ‡¥§‡¥≥‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï. ‡¥∞‡¥æ‡¥∏ ‡¥Æ‡¥∞‡µÅ‡¥®‡µç‡¥®‡¥ø‡¥®‡µç ‡¥Æ‡µÅ‡¥Æ‡µç‡¥™‡µç ‡¥ú‡µà‡¥µ‡¥ø‡¥ï ‡¥Æ‡¥æ‡µº‡¥ó‡¥ô‡µç‡¥ô‡µæ ‡¥™‡¥∞‡µÄ‡¥ï‡µç‡¥∑‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
          "‡¥á‡¥≤‡¥ï‡¥≥‡¥ø‡µΩ ‡¥™‡¥æ‡¥ü‡µÅ‡¥ï‡µæ ‡¥ï‡¥æ‡¥£‡µÅ‡¥®‡µç‡¥®‡µÅ‡¥µ‡µÜ‡¥ô‡µç‡¥ï‡¥ø‡µΩ ‡¥≤‡¥ø‡¥±‡µç‡¥±‡µº ‡¥µ‡µÜ‡¥≥‡µç‡¥≥‡¥§‡µç‡¥§‡¥ø‡µΩ 2 ‡¥ó‡µç‡¥∞‡¥æ‡¥Ç ‡¥ï‡µã‡¥™‡µç‡¥™‡µº ‡¥ì‡¥ï‡µç‡¥∏‡¥ø‡¥ï‡µç‡¥≤‡µã‡¥±‡µà‡¥°‡µç ‡¥ï‡¥≤‡µº‡¥§‡µç‡¥§‡¥ø ‡¥§‡¥≥‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
        ],
        fertilizer: [
          "‡¥Æ‡¥£‡µç‡¥£‡µç ‡¥™‡¥∞‡¥ø‡¥∂‡µã‡¥ß‡¥®‡¥Ø‡µÅ‡¥ü‡µÜ ‡¥Ö‡¥ü‡¥ø‡¥∏‡µç‡¥•‡¥æ‡¥®‡¥§‡µç‡¥§‡¥ø‡µΩ ‡¥µ‡¥≥‡¥Ç ‡¥®‡µΩ‡¥ï‡µÅ‡¥ï. ‡¥ú‡µà‡¥µ ‡¥µ‡¥≥‡¥Ç ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï - ‡¥π‡µÜ‡¥ï‡µç‡¥ü‡¥±‡¥ø‡¥®‡µç 10 ‡¥ü‡µ∫ ‡¥ö‡¥æ‡¥£‡¥ï‡¥Ç.",
          "‡¥´‡µã‡¥∏‡µç‡¥´‡¥±‡¥∏‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥ï‡µÅ‡¥±‡¥µ‡µç ‡¥ï‡¥æ‡¥£‡µÅ‡¥®‡µç‡¥®‡µÅ. ‡¥µ‡¥ø‡¥§‡¥Ø‡µç‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥® ‡¥∏‡¥Æ‡¥Ø‡¥§‡µç‡¥§‡µç ‡¥π‡µÜ‡¥ï‡µç‡¥ü‡¥±‡¥ø‡¥®‡µç 100 ‡¥ï‡¥ø‡¥≤‡µã DAP ‡¥®‡µΩ‡¥ï‡µÅ‡¥ï.",
        ],
        general: [
          "‡¥ï‡µÉ‡¥∑‡¥ø‡¥Ø‡µÅ‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥¨‡¥®‡µç‡¥ß‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü ‡¥è‡¥§‡µç ‡¥™‡µç‡¥∞‡¥∂‡µç‡¥®‡¥§‡µç‡¥§‡¥ø‡¥®‡µÅ‡¥Ç ‡¥û‡¥æ‡µª ‡¥á‡¥µ‡¥ø‡¥ü‡µÜ‡¥Ø‡µÅ‡¥£‡µç‡¥ü‡µç. ‡¥µ‡¥ø‡¥≥‡¥ï‡µæ, ‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥•, ‡¥ï‡µÄ‡¥ü‡¥ô‡µç‡¥ô‡µæ ‡¥Ö‡¥≤‡µç‡¥≤‡µÜ‡¥ô‡µç‡¥ï‡¥ø‡µΩ ‡¥µ‡¥≥‡¥ô‡µç‡¥ô‡¥≥‡µÜ‡¥ï‡µç‡¥ï‡µÅ‡¥±‡¥ø‡¥ö‡µç‡¥ö‡µç ‡¥ö‡µã‡¥¶‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
          "‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥ï‡µÉ‡¥∑‡¥ø ‡¥Æ‡µÜ‡¥ö‡µç‡¥ö‡¥™‡µç‡¥™‡µÜ‡¥ü‡µÅ‡¥§‡µç‡¥§‡¥æ‡µª ‡¥Ü‡¥ß‡µÅ‡¥®‡¥ø‡¥ï ‡¥∏‡¥æ‡¥ô‡µç‡¥ï‡µá‡¥§‡¥ø‡¥ï‡¥µ‡¥ø‡¥¶‡µç‡¥Ø ‡¥∏‡µç‡¥µ‡µÄ‡¥ï‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï. ‡¥°‡µç‡¥∞‡¥ø‡¥™‡µç‡¥™‡µç ‡¥ú‡¥≤‡¥∏‡µá‡¥ö‡¥®‡¥µ‡µÅ‡¥Ç ‡¥Æ‡µæ‡¥ö‡µç‡¥ö‡¥ø‡¥Ç‡¥ó‡µÅ‡¥Ç ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
        ],
      },
    }

    const langResponses = responses[currentLanguage] || responses.hi
    const categoryResponses = langResponses[category] || langResponses.general
    return categoryResponses[Math.floor(Math.random() * categoryResponses.length)]
  }

  const handleSendMessage = async () => {
    if (!inputValue.trim() || isLoading) return

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputValue,
      sender: "user",
      timestamp: new Date(),
      category: categorizeMessage(inputValue),
    }

    setMessages((prev) => [...prev, userMessage])
    setInputValue("")
    setIsLoading(true)

    try {
      const botResponse = await simulateBotResponse(inputValue)
      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: botResponse,
        sender: "bot",
        timestamp: new Date(),
        category: categorizeMessage(botResponse),
      }
      setMessages((prev) => [...prev, botMessage])
    } catch (error) {
      console.error("Error getting bot response:", error)
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: t.errorMessage,
        sender: "bot",
        timestamp: new Date(),
        category: "general",
      }
      setMessages((prev) => [...prev, errorMessage])
    } finally {
      setIsLoading(false)
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  return (
    <div className={`min-h-screen bg-gradient-to-br ${theme.background} p-4 transition-all duration-500`}>
      <div className="max-w-4xl mx-auto">
        <Card className="h-[90vh] flex flex-col shadow-2xl border-0 backdrop-blur-sm bg-white/90 dark:bg-gray-900/90">
          <CardHeader className={`${theme.primary} text-white p-6 rounded-t-lg`}>
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <Avatar className="w-12 h-12 bg-white/20">
                  <AvatarFallback className="bg-white/20 text-white font-bold text-lg">üåæ</AvatarFallback>
                </Avatar>
                <div>
                  <h1 className="text-2xl font-bold">{t.title}</h1>
                  <p className="text-white/90 text-sm">{t.subtitle}</p>
                </div>
              </div>
              <div className="flex items-center gap-2">
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setShowLanguageSelector(!showLanguageSelector)}
                  className="text-white hover:bg-white/20"
                >
                  <Languages className="w-4 h-4" />
                </Button>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setIsDarkMode(!isDarkMode)}
                  className="text-white hover:bg-white/20"
                >
                  {isDarkMode ? <Sun className="w-4 h-4" /> : <Moon className="w-4 h-4" />}
                </Button>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setShowThemeSelector(!showThemeSelector)}
                  className="text-white hover:bg-white/20"
                >
                  <Palette className="w-4 h-4" />
                </Button>
              </div>
            </div>

            {showLanguageSelector && (
              <div className="mt-4 p-4 bg-white/10 rounded-lg backdrop-blur-sm">
                <p className="text-sm mb-3 text-white/90">‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç / Choose Language / ‡¥≠‡¥æ‡¥∑ ‡¥§‡¥ø‡¥∞‡¥û‡µç‡¥û‡µÜ‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥ï:</p>
                <div className="grid grid-cols-3 gap-2">
                  {languages.map((lang) => (
                    <Button
                      key={lang.code}
                      variant={currentLanguage === lang.code ? "secondary" : "ghost"}
                      size="sm"
                      onClick={() => {
                        setCurrentLanguage(lang.code)
                        setShowLanguageSelector(false)
                      }}
                      className="flex items-center gap-2 text-white hover:bg-white/20"
                    >
                      <span>{lang.flag}</span>
                      <span className="text-xs">{lang.name}</span>
                    </Button>
                  ))}
                </div>
              </div>
            )}

            {showThemeSelector && (
              <div className="mt-4 p-4 bg-white/10 rounded-lg backdrop-blur-sm">
                <p className="text-sm mb-3 text-white/90">{t.themeSelector}</p>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
                  {themes.map((themeItem, index) => (
                    <Button
                      key={themeItem.name}
                      variant={currentTheme === index ? "secondary" : "ghost"}
                      size="sm"
                      onClick={() => {
                        setCurrentTheme(index)
                        setShowThemeSelector(false)
                      }}
                      className="flex items-center gap-2 text-white hover:bg-white/20"
                    >
                      {themeItem.icon}
                      <span className="text-xs">{themeItem.name}</span>
                    </Button>
                  ))}
                </div>
              </div>
            )}
          </CardHeader>

          <CardContent className="flex-1 p-0 flex flex-col">
            <ScrollArea className="flex-1 p-6" ref={scrollAreaRef}>
              <div className="space-y-4">
                {messages.map((message) => (
                  <div
                    key={message.id}
                    className={cn(
                      "flex gap-3 max-w-[85%]",
                      message.sender === "user" ? "ml-auto flex-row-reverse" : "",
                    )}
                  >
                    <Avatar className="w-8 h-8 flex-shrink-0">
                      <AvatarFallback
                        className={cn(
                          message.sender === "user"
                            ? "bg-blue-100 text-blue-600 dark:bg-blue-900 dark:text-blue-300"
                            : `${theme.secondary} ${theme.accent}`,
                        )}
                      >
                        {message.sender === "user" ? "üë§" : "üåæ"}
                      </AvatarFallback>
                    </Avatar>

                    <div className={cn("flex flex-col gap-1", message.sender === "user" ? "items-end" : "items-start")}>
                      <div
                        className={cn(
                          "rounded-2xl px-4 py-3 max-w-full break-words",
                          message.sender === "user"
                            ? "bg-blue-600 text-white rounded-br-md"
                            : `${theme.secondary} text-gray-800 dark:text-gray-200 rounded-bl-md`,
                        )}
                      >
                        <p className="text-sm leading-relaxed">{message.text}</p>
                      </div>

                      <div className="flex items-center gap-2 px-2">
                        {message.category && message.category !== "general" && (
                          <Badge variant="secondary" className={cn("text-xs", getCategoryColor(message.category))}>
                            {getCategoryIcon(message.category)}
                            <span className="ml-1 capitalize">{t.categories[message.category]}</span>
                          </Badge>
                        )}
                        <span className="text-xs text-gray-500 dark:text-gray-400">
                          {message.timestamp.toLocaleTimeString(
                            currentLanguage === "hi" ? "hi-IN" : currentLanguage === "ml" ? "ml-IN" : "en-US",
                            {
                              hour: "2-digit",
                              minute: "2-digit",
                            },
                          )}
                        </span>
                      </div>
                    </div>
                  </div>
                ))}

                {isLoading && (
                  <div className="flex gap-3 max-w-[85%]">
                    <Avatar className="w-8 h-8">
                      <AvatarFallback className={`${theme.secondary} ${theme.accent}`}>üåæ</AvatarFallback>
                    </Avatar>
                    <div className={`${theme.secondary} rounded-2xl rounded-bl-md px-4 py-3`}>
                      <div className="flex gap-1">
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                        <div
                          className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                          style={{ animationDelay: "0.1s" }}
                        ></div>
                        <div
                          className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                          style={{ animationDelay: "0.2s" }}
                        ></div>
                      </div>
                    </div>
                  </div>
                )}
                <div ref={messagesEndRef} />
              </div>
            </ScrollArea>

            <Separator />

            <div className="p-4 bg-gray-50 dark:bg-gray-800/50">
              <div className="flex gap-3 items-end">
                <div className="flex-1">
                  <Input
                    value={inputValue}
                    onChange={(e) => setInputValue(e.target.value)}
                    onKeyPress={handleKeyPress}
                    placeholder={t.placeholder}
                    disabled={isLoading}
                    className="resize-none border-2 focus:border-green-500 dark:focus:border-green-400"
                  />
                </div>
                <Button
                  onClick={handleSendMessage}
                  disabled={!inputValue.trim() || isLoading}
                  className={cn(theme.primary, "px-6 py-2 transition-all duration-200")}
                >
                  <Send className="w-4 h-4" />
                </Button>
              </div>

              <div className="mt-3 flex flex-wrap gap-2">
                {t.suggestions.map((suggestion) => (
                  <Button
                    key={suggestion}
                    variant="outline"
                    size="sm"
                    onClick={() => setInputValue(suggestion)}
                    className="text-xs hover:bg-green-50 dark:hover:bg-green-900/20"
                  >
                    {suggestion}
                  </Button>
                ))}
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
